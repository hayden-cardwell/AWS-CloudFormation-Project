AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Type: String
    Description: An environment name for your demo Deep Security Environment!
    Default: DeepSec
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR:
    Description: An IP block for your subnet where your EC2 instances will sit!
    Type: String
    Default: 10.0.1.0/24

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
    
  PublicRouteTableAssociation:    
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Completely open to the internet, in real world conditions this would be locked down. 
      GroupName: OpenManager
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref VPC

Outputs:
  VPC:
    Value: !Ref VPC
  PublicSubnet:
    Value: !Ref PublicSubnet
  EC2SecurityGroup:
    Value: !Ref EC2SecurityGroup